{"version":3,"sources":["main.js","App.js","reportWebVitals.js","index.js"],"names":["defaultCode","String","raw","defaultFunctionCode","fname","decodeHTMLEntities","text","textArea","document","createElement","innerHTML","value","App","state","f1","f2","myInputFunctionCode","consoleWidth","consoleOutput","input","f1_out","f2_out","maxTries","comparing","timeout","getCodeFromInput","bind","compare","onChangeText","replaceAll","this","axios","defaults","setState","status","code","post","then","res","data","substring","split","console","log","length","showIssue","catch","err","e","target","name","className","disabled","onClick","onChange","form","ref","style","width","readOnly","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.007bc72b.chunk.js","sourcesContent":["const defaultCode = String.raw`#include <bits/stdc++.h>\r\n\r\nusing namespace std;\r\n#define cin cpp_comparator_variable_for_input\r\n#define cout cpp_comparator_variable_for_output\r\n\r\n// required function\r\nstring myInputGen();\r\nvoid function1();\r\nvoid function2();\r\n\r\n//global variables\r\nstringstream cpp_comparator_variable_for_input;\r\nstringstream cpp_comparator_variable_for_output;\r\nstring cpp_comparator_variable_for_to_store_current_input;\r\n\r\nvoid initInput()\r\n{\r\n    cpp_comparator_variable_for_to_store_current_input = myInputGen();\r\n}\r\nvoid setInput(){\r\n    cpp_comparator_variable_for_input.clear();   \r\n    cpp_comparator_variable_for_input << cpp_comparator_variable_for_to_store_current_input;\r\n}\r\nstring getOutput()\r\n{\r\n    string output = cpp_comparator_variable_for_output.str();\r\n    return output;\r\n}\r\nvoid flushOutput(){\r\n    //flush cout\r\n    cpp_comparator_variable_for_output.str(\"\");\r\n}\r\n\r\n\r\nint main()\r\n{\r\n    srand(time(NULL));\r\n    string op1, op2;\r\n    int i = 0;\r\n    do\r\n    {\r\n        i++;\r\n        //initialize once\r\n        initInput();\r\n\r\n        //flush output, set input and call function\r\n        flushOutput();\r\n        setInput();\r\n        function1();\r\n        op1 = getOutput();\r\n\r\n        flushOutput();\r\n        setInput();\r\n        function2();\r\n        op2 = getOutput();\r\n    } while (op1 == op2 && i <= REPLACE_ME_WITH_A_CONSTANT_VALUE);\r\n\r\n    if (op1 != op2)\r\n    {\r\n        printf(\"%s|%s|%s\", cpp_comparator_variable_for_to_store_current_input.c_str(), op1.c_str(), op2.c_str());\r\n    }else{\r\n        printf(\"No mismatch found with %d trials!\", REPLACE_ME_WITH_A_CONSTANT_VALUE);\r\n    }\r\n}\r\n\r\n// string myInputGen()\r\n// {\r\n//     return \"your input\";\r\n// }\r\n// void function1(){\r\n//     /*****Instructions**********\r\n//      * All inputs should be read using cin (dont use scanf)\r\n//      * Code must output using cout (dont use printf)\r\n//      * If there are other functions, place them above this function\r\n//     */\r\n//    cout<<\"Output from function1\"<<endl;\r\n// }\r\n// void function2(){\r\n//     /*****Instructions**********\r\n//      * All inputs should be read using cin (dont use scanf)\r\n//      * Code must output using cout (dont use printf)\r\n//      * If there are other functions, place them above this function\r\n//     */\r\n//    cout<<\"Output from function2\"<<endl;\r\n// }\r\n`;\r\nexport default defaultCode;","import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport raw from './main.js'; // Relative path to your File\nconst defaultFunctionCode = (fname) => {\n  return `void ${fname}(){\n    /*****Instructions**********\n     * Remove any #include directives or global variables\n     * All inputs should be read using cin (dont use scanf)\n     * Code must output using cout (dont use printf)\n     * If there are other functions, place them above this function \n     * and make sure their names dont coincide in two codes\n    */\n    cout<<\"Output from ${fname}\"<<endl;\n}`;\n}\nconst defaultInputGenCode = `string myInputGen()\n{\n    /*****Instructions**********\n     * This function should not print anything.\n     * You can use rand() function to randomize inputs\n     * Use to_string() method to put integers input\n    */\n    return \"your input\";\n}`;\nfunction decodeHTMLEntities(text) {\n  var textArea = document.createElement('textarea');\n  textArea.innerHTML = text;\n  return textArea.value;\n}\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      f1: defaultFunctionCode(\"function1\"),\n      f2: defaultFunctionCode(\"function2\"),\n      myInputFunctionCode: defaultInputGenCode,\n      consoleWidth: 90,\n      consoleOutput: {\n        input: \"\",\n        f1_out: \"\",\n        f2_out: \"\"\n      },\n      maxTries: 1000000,\n      comparing: false,\n      timeout: 10\n    }\n    this.getCodeFromInput = this.getCodeFromInput.bind(this);\n    this.compare = this.compare.bind(this);\n    this.onChangeText = this.onChangeText.bind(this);\n  }\n  getCodeFromInput() {\n    const code = `\n    ${raw.replaceAll(\"REPLACE_ME_WITH_A_CONSTANT_VALUE\", this.state.maxTries)}\n    ${this.state.myInputFunctionCode}\n    ${this.state.f1}\n    ${this.state.f2}`;\n    return code;\n  }\n  compare() {\n    axios.defaults.timeout = this.state.timeout * 1000;\n    this.setState({\n      status: `Comparing both function with ${this.state.maxTries} random inputs with a timeout of ${this.state.timeout} seconds.`,\n      consoleOutput: {\n        input: \"\",\n        f1_out: \"\",\n        f2_out: \"\"\n      },\n      comparing: true\n    })\n    const code = this.getCodeFromInput();\n    axios.post(\"http://localhost:5000/api/users/compile\", {\n      code\n    }).then(res => {\n      const data = res.data.substring(153).split(\"|\");\n      console.log(data);\n      if (data.length === 3) {\n        this.setState({\n          status: \"Found Mismatch!\",\n          consoleOutput: {\n            input: data[0],\n            f1_out: data[1],\n            f2_out: data[2]\n          },\n          showIssue: true,\n          comparing: false\n        });\n      } else {\n        this.setState({\n          status: decodeHTMLEntities(data[0]),\n          showIssue: false,\n          comparing: false\n        });\n      }\n    })\n      .catch(err => {\n        this.setState({\n          status: \"Timeout reached!\",\n          showIssue: false,\n          comparing: false\n        });\n      });\n  }\n  onChangeText(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"header\">\n          <button disabled={this.state.comparing} className=\"compareButton\" onClick={this.compare}>{this.state.comparing ? `Comparing...` : `Compare`}</button>\n          Timeout Limit\n          <select value={this.state.timeout} name='timeout' onChange={this.onChangeText}>\n            <option value='1'>1 Seconds</option>\n            <option value='10'>10 Seconds</option>\n            <option value='20'>20 Seconds</option>\n            <option value='60'>60 Seconds</option>\n          </select>\n          Number of Inputs\n          <select value={this.state.maxTries} name='maxTries' onChange={this.onChangeText}>\n            <option value='10'>10</option>\n            <option value='1000'>10^3</option>\n            <option value='1000000'>10^6</option>\n            <option value='1000000000'>10^9</option>\n          </select>\n        </div>\n        <div className=\"App\">\n          <div className=\"editor\">\n            <div className=\"input-params\">\n              <textarea onChange={this.onChangeText} name=\"myInputFunctionCode\" form=\"usrform\" value={this.state.myInputFunctionCode}></textarea>\n            </div>\n            <div className=\"function-codes\">\n              <div className=\"f1\">\n                <textarea className=\"functions-box\" onChange={this.onChangeText} name=\"f1\" form=\"usrform\" value={this.state.f1}></textarea>\n              </div>\n              <div className=\"f2\">\n                <textarea className=\"functions-box\" onChange={this.onChangeText} name=\"f2\" form=\"usrform\" value={this.state.f2}></textarea>\n              </div>\n            </div>\n          </div>\n          <div className=\"console\" ref='test' style={{ width: `${this.state.consoleWidth}%` }}>\n            <span className=\"headline\">Status</span>\n            <textarea readOnly className=\"consoleEditor\" name=\"status\" form=\"usrform\" value={this.state.status}></textarea>\n\n            <span className=\"headline\">Input</span>\n            <textarea readOnly className=\"consoleEditor\" name=\"input\" form=\"usrform\" value={this.state.consoleOutput.input}></textarea>\n\n            <span className=\"headline\">Output From function1</span>\n            <textarea readOnly className=\"consoleEditor\" name=\"f1_out\" form=\"usrform\" value={this.state.consoleOutput.f1_out}></textarea>\n\n            <span className=\"headline\">Output From function2</span>\n            <textarea readOnly className=\"consoleEditor\" name=\"f2_out\" form=\"usrform\" value={this.state.consoleOutput.f2_out}></textarea>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}