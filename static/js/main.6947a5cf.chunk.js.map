{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["defaultFunctionCode","fname","decodeHTMLEntities","text","textArea","document","createElement","innerHTML","value","App","state","f1","f2","myInputFunctionCode","consoleWidth","consoleOutput","input","f1_out","f2_out","maxTries","comparing","timeout","compare","bind","onChangeText","this","setState","status","axios","post","then","res","console","log","data","success","message","output1","output2","showIssue","catch","err","e","target","name","className","disabled","onClick","onChange","form","ref","style","width","readOnly","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6947a5cf.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport './App.css';\nconst defaultFunctionCode = (fname) => {\n  return `int main(){\n    /*****Instructions**********\n     * All inputs should be read using cin (dont use scanf)\n     * Code must output using cout (dont use printf)\n    */\n    cout<<\"Output from ${fname}\"<<endl;\n}`;\n}\nconst defaultInputGenCode = `int main()\n{\n    /*****Instructions**********\n     * This function should print anything the desired input.\n     * Only use cout for printing (Dont use printf)\n    */\n    cout<<\"your input\";\n}`;\nfunction decodeHTMLEntities(text) {\n  var textArea = document.createElement('textarea');\n  textArea.innerHTML = text;\n  return textArea.value;\n}\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      f1: defaultFunctionCode(\"function1\"),\n      f2: defaultFunctionCode(\"function2\"),\n      myInputFunctionCode: defaultInputGenCode,\n      consoleWidth: 90,\n      consoleOutput: {\n        input: \"\",\n        f1_out: \"\",\n        f2_out: \"\"\n      },\n      maxTries: 1000000,\n      comparing: false,\n      timeout: 10\n    }\n    this.compare = this.compare.bind(this);\n    this.onChangeText = this.onChangeText.bind(this);\n  }\n  compare() {\n    this.setState({\n      status: `Comparing both function with ${this.state.maxTries} random inputs with a timeout of ${this.state.timeout} seconds.`,\n      consoleOutput: {\n        input: \"\",\n        f1_out: \"\",\n        f2_out: \"\"\n      },\n      comparing: true\n    })\n    axios.post(\"https://q-tv.herokuapp.com/api/compile\", {\n      input: this.state.myInputFunctionCode,\n      f1: this.state.f1,\n      f2: this.state.f2,\n      maxTries: this.state.maxTries,\n      timeout: this.state.timeout,\n    }).then(res => {\n      console.log(res.data);\n      if(res.data.success!==0){\n        this.setState({\n          status: res.data.message,\n          consoleOutput: {\n            input: res.data.input,\n            f1_out: res.data.output1,\n            f2_out: res.data.output2\n          },\n          showIssue: false,\n          comparing: false\n        });\n      }else{\n        this.setState({\n          status: `${res.data.message}\\n${decodeHTMLEntities(res.data.data)}`,\n          showIssue: false,\n          comparing: false\n        });\n      }\n    })\n      .catch(err => {\n        this.setState({\n          status: \"Error reaching server!\",\n          showIssue: false,\n          comparing: false\n        });\n      });\n  }\n  onChangeText(e) {\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n  render() {\n    return (\n      <div className=\"main\">\n        <div className=\"header\">\n          <button disabled={this.state.comparing} className=\"compareButton\" onClick={this.compare}>{this.state.comparing ? `Comparing...` : `Compare`}</button>\n          Timeout Limit\n          <select value={this.state.timeout} name='timeout' onChange={this.onChangeText}>\n            <option value='1'>1 Seconds</option>\n            <option value='10'>10 Seconds</option>\n            <option value='20'>20 Seconds</option>\n            <option value='60'>60 Seconds</option>\n          </select>\n          Number of Inputs\n          <select value={this.state.maxTries} name='maxTries' onChange={this.onChangeText}>\n            <option value='10'>10</option>\n            <option value='1000'>10^3</option>\n            <option value='1000000'>10^6</option>\n            <option value='1000000000'>10^9</option>\n          </select>\n        </div>\n        <div className=\"App\">\n          <div className=\"editor\">\n            <div className=\"input-params\">\n              <textarea onChange={this.onChangeText} name=\"myInputFunctionCode\" form=\"usrform\" value={this.state.myInputFunctionCode}></textarea>\n            </div>\n            <div className=\"function-codes\">\n              <div className=\"f1\">\n                <textarea className=\"functions-box\" onChange={this.onChangeText} name=\"f1\" form=\"usrform\" value={this.state.f1}></textarea>\n              </div>\n              <div className=\"f2\">\n                <textarea className=\"functions-box\" onChange={this.onChangeText} name=\"f2\" form=\"usrform\" value={this.state.f2}></textarea>\n              </div>\n            </div>\n          </div>\n          <div className=\"console\" ref='test' style={{ width: `${this.state.consoleWidth}%` }}>\n            <span className=\"headline\">Status</span>\n            <textarea readOnly className=\"consoleEditor\" name=\"status\" form=\"usrform\" value={this.state.status}></textarea>\n\n            <span className=\"headline\">Input</span>\n            <textarea readOnly className=\"consoleEditor\" name=\"input\" form=\"usrform\" value={this.state.consoleOutput.input}></textarea>\n\n            <span className=\"headline\">Output From function1</span>\n            <textarea readOnly className=\"consoleEditor\" name=\"f1_out\" form=\"usrform\" value={this.state.consoleOutput.f1_out}></textarea>\n\n            <span className=\"headline\">Output From function2</span>\n            <textarea readOnly className=\"consoleEditor\" name=\"f2_out\" form=\"usrform\" value={this.state.consoleOutput.f2_out}></textarea>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}