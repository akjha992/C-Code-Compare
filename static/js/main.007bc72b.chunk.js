(this["webpackJsonpcpp-code-compare"]=this["webpackJsonpcpp-code-compare"]||[]).push([[0],{25:function(t,n,e){},44:function(t,n,e){},46:function(t,n,e){"use strict";e.r(n);var o,s=e(2),a=e.n(s),i=e(14),c=e.n(i),u=(e(25),e(15)),r=e(16),p=e(17),l=e(3),m=e(20),d=e(19),h=e(5),f=e.n(h),_=(e(44),e(18)),b=String.raw(o||(o=Object(_.a)(['#include <bits/stdc++.h>\n\nusing namespace std;\n#define cin cpp_comparator_variable_for_input\n#define cout cpp_comparator_variable_for_output\n\n// required function\nstring myInputGen();\nvoid function1();\nvoid function2();\n\n//global variables\nstringstream cpp_comparator_variable_for_input;\nstringstream cpp_comparator_variable_for_output;\nstring cpp_comparator_variable_for_to_store_current_input;\n\nvoid initInput()\n{\n    cpp_comparator_variable_for_to_store_current_input = myInputGen();\n}\nvoid setInput(){\n    cpp_comparator_variable_for_input.clear();   \n    cpp_comparator_variable_for_input << cpp_comparator_variable_for_to_store_current_input;\n}\nstring getOutput()\n{\n    string output = cpp_comparator_variable_for_output.str();\n    return output;\n}\nvoid flushOutput(){\n    //flush cout\n    cpp_comparator_variable_for_output.str("");\n}\n\n\nint main()\n{\n    srand(time(NULL));\n    string op1, op2;\n    int i = 0;\n    do\n    {\n        i++;\n        //initialize once\n        initInput();\n\n        //flush output, set input and call function\n        flushOutput();\n        setInput();\n        function1();\n        op1 = getOutput();\n\n        flushOutput();\n        setInput();\n        function2();\n        op2 = getOutput();\n    } while (op1 == op2 && i <= REPLACE_ME_WITH_A_CONSTANT_VALUE);\n\n    if (op1 != op2)\n    {\n        printf("%s|%s|%s", cpp_comparator_variable_for_to_store_current_input.c_str(), op1.c_str(), op2.c_str());\n    }else{\n        printf("No mismatch found with %d trials!", REPLACE_ME_WITH_A_CONSTANT_VALUE);\n    }\n}\n\n// string myInputGen()\n// {\n//     return "your input";\n// }\n// void function1(){\n//     /*****Instructions**********\n//      * All inputs should be read using cin (dont use scanf)\n//      * Code must output using cout (dont use printf)\n//      * If there are other functions, place them above this function\n//     */\n//    cout<<"Output from function1"<<endl;\n// }\n// void function2(){\n//     /*****Instructions**********\n//      * All inputs should be read using cin (dont use scanf)\n//      * Code must output using cout (dont use printf)\n//      * If there are other functions, place them above this function\n//     */\n//    cout<<"Output from function2"<<endl;\n// }\n']))),j=e(0),v=function(t){return"void ".concat(t,'(){\n    /*****Instructions**********\n     * Remove any #include directives or global variables\n     * All inputs should be read using cin (dont use scanf)\n     * Code must output using cout (dont use printf)\n     * If there are other functions, place them above this function \n     * and make sure their names dont coincide in two codes\n    */\n    cout<<"Output from ').concat(t,'"<<endl;\n}')};function O(t){var n=document.createElement("textarea");return n.innerHTML=t,n.value}var g=function(t){Object(m.a)(e,t);var n=Object(d.a)(e);function e(){var t;return Object(r.a)(this,e),(t=n.call(this)).state={f1:v("function1"),f2:v("function2"),myInputFunctionCode:'string myInputGen()\n{\n    /*****Instructions**********\n     * This function should not print anything.\n     * You can use rand() function to randomize inputs\n     * Use to_string() method to put integers input\n    */\n    return "your input";\n}',consoleWidth:90,consoleOutput:{input:"",f1_out:"",f2_out:""},maxTries:1e6,comparing:!1,timeout:10},t.getCodeFromInput=t.getCodeFromInput.bind(Object(l.a)(t)),t.compare=t.compare.bind(Object(l.a)(t)),t.onChangeText=t.onChangeText.bind(Object(l.a)(t)),t}return Object(p.a)(e,[{key:"getCodeFromInput",value:function(){return"\n    ".concat(b.replaceAll("REPLACE_ME_WITH_A_CONSTANT_VALUE",this.state.maxTries),"\n    ").concat(this.state.myInputFunctionCode,"\n    ").concat(this.state.f1,"\n    ").concat(this.state.f2)}},{key:"compare",value:function(){var t=this;f.a.defaults.timeout=1e3*this.state.timeout,this.setState({status:"Comparing both function with ".concat(this.state.maxTries," random inputs with a timeout of ").concat(this.state.timeout," seconds."),consoleOutput:{input:"",f1_out:"",f2_out:""},comparing:!0});var n=this.getCodeFromInput();f.a.post("http://localhost:5000/api/users/compile",{code:n}).then((function(n){var e=n.data.substring(153).split("|");console.log(e),3===e.length?t.setState({status:"Found Mismatch!",consoleOutput:{input:e[0],f1_out:e[1],f2_out:e[2]},showIssue:!0,comparing:!1}):t.setState({status:O(e[0]),showIssue:!1,comparing:!1})})).catch((function(n){t.setState({status:"Timeout reached!",showIssue:!1,comparing:!1})}))}},{key:"onChangeText",value:function(t){this.setState(Object(u.a)({},t.target.name,t.target.value))}},{key:"render",value:function(){return Object(j.jsxs)("div",{className:"main",children:[Object(j.jsxs)("div",{className:"header",children:[Object(j.jsx)("button",{disabled:this.state.comparing,className:"compareButton",onClick:this.compare,children:this.state.comparing?"Comparing...":"Compare"}),"Timeout Limit",Object(j.jsxs)("select",{value:this.state.timeout,name:"timeout",onChange:this.onChangeText,children:[Object(j.jsx)("option",{value:"1",children:"1 Seconds"}),Object(j.jsx)("option",{value:"10",children:"10 Seconds"}),Object(j.jsx)("option",{value:"20",children:"20 Seconds"}),Object(j.jsx)("option",{value:"60",children:"60 Seconds"})]}),"Number of Inputs",Object(j.jsxs)("select",{value:this.state.maxTries,name:"maxTries",onChange:this.onChangeText,children:[Object(j.jsx)("option",{value:"10",children:"10"}),Object(j.jsx)("option",{value:"1000",children:"10^3"}),Object(j.jsx)("option",{value:"1000000",children:"10^6"}),Object(j.jsx)("option",{value:"1000000000",children:"10^9"})]})]}),Object(j.jsxs)("div",{className:"App",children:[Object(j.jsxs)("div",{className:"editor",children:[Object(j.jsx)("div",{className:"input-params",children:Object(j.jsx)("textarea",{onChange:this.onChangeText,name:"myInputFunctionCode",form:"usrform",value:this.state.myInputFunctionCode})}),Object(j.jsxs)("div",{className:"function-codes",children:[Object(j.jsx)("div",{className:"f1",children:Object(j.jsx)("textarea",{className:"functions-box",onChange:this.onChangeText,name:"f1",form:"usrform",value:this.state.f1})}),Object(j.jsx)("div",{className:"f2",children:Object(j.jsx)("textarea",{className:"functions-box",onChange:this.onChangeText,name:"f2",form:"usrform",value:this.state.f2})})]})]}),Object(j.jsxs)("div",{className:"console",ref:"test",style:{width:"".concat(this.state.consoleWidth,"%")},children:[Object(j.jsx)("span",{className:"headline",children:"Status"}),Object(j.jsx)("textarea",{readOnly:!0,className:"consoleEditor",name:"status",form:"usrform",value:this.state.status}),Object(j.jsx)("span",{className:"headline",children:"Input"}),Object(j.jsx)("textarea",{readOnly:!0,className:"consoleEditor",name:"input",form:"usrform",value:this.state.consoleOutput.input}),Object(j.jsx)("span",{className:"headline",children:"Output From function1"}),Object(j.jsx)("textarea",{readOnly:!0,className:"consoleEditor",name:"f1_out",form:"usrform",value:this.state.consoleOutput.f1_out}),Object(j.jsx)("span",{className:"headline",children:"Output From function2"}),Object(j.jsx)("textarea",{readOnly:!0,className:"consoleEditor",name:"f2_out",form:"usrform",value:this.state.consoleOutput.f2_out})]})]})]})}}]),e}(a.a.Component),x=function(t){t&&t instanceof Function&&e.e(3).then(e.bind(null,47)).then((function(n){var e=n.getCLS,o=n.getFID,s=n.getFCP,a=n.getLCP,i=n.getTTFB;e(t),o(t),s(t),a(t),i(t)}))};c.a.render(Object(j.jsx)(a.a.StrictMode,{children:Object(j.jsx)(g,{})}),document.getElementById("root")),x()}},[[46,1,2]]]);
//# sourceMappingURL=main.007bc72b.chunk.js.map